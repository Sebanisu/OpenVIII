using System;
using System.Collections.Generic;

namespace OpenVIII.Fields.Scripts.Instructions
{
    public abstract class JsmInstruction : IJsmInstruction, IFormattableScript
    {
        #region Fields

        private static readonly IReadOnlyDictionary<Jsm.Opcode, Make> Factories = new Dictionary<Jsm.Opcode, Make>
        {
            {Jsm.Opcode.AASK, (p, s) => new AASK(p, s)},
            {Jsm.Opcode.NOP, (p, s) => new NOP(p, s)},
            {Jsm.Opcode.JMP, (p, s) => new JMP(p, s)},
            {Jsm.Opcode.JPF, (p, s) => new JPF(p, s)},
            {Jsm.Opcode.GJMP, (p, s) => new GJMP()},
            {Jsm.Opcode.LBL, (p, s) => new LBL(p, s)},
            {Jsm.Opcode.RET, (p, s) => new IRET(p, s)},
            {Jsm.Opcode.POPI_L, (p, s) => new POPI_L(p, s)},
            {Jsm.Opcode.POPM_B, (p, s) => new POPM_B(p, s)},
            {Jsm.Opcode.POPM_W, (p, s) => new POPM_W(p, s)},
            {Jsm.Opcode.POPM_L, (p, s) => new POPM_L(p, s)},
            {Jsm.Opcode.REQ, (p, s) => new REQ(p, s)},
            {Jsm.Opcode.REQSW, (p, s) => new REQSW(p, s)},
            {Jsm.Opcode.REQEW, (p, s) => new REQEW(p, s)},
            {Jsm.Opcode.PREQ, (p, s) => new PREQ(p, s)},
            {Jsm.Opcode.PREQSW, (p, s) => new PREQSW(p, s)},
            {Jsm.Opcode.PREQEW, (p, s) => new PREQEW(p, s)},
            {Jsm.Opcode.Unuse, (p, s) => new Unuse(p, s)},
            {Jsm.Opcode.Debug, (p, s) => new Debug()},
            {Jsm.Opcode.Halt, (p, s) => new Halt(p, s)},
            {Jsm.Opcode.Set, (p, s) => new Set(p, s)},
            {Jsm.Opcode.Set3, (p, s) => new Set3(p, s)},
            {Jsm.Opcode.IDLock, (p, s) => new IDLock(p, s)},
            {Jsm.Opcode.IDUnlock, (p, s) => new IDUnlock(p, s)},
            {Jsm.Opcode.EffectPlay2, (p, s) => new EffectPlay2(p, s)},
            {Jsm.Opcode.FootStep, (p, s) => new FootStep(p, s)},
            {Jsm.Opcode.Jump, (p, s) => new Jump(p, s)},
            {Jsm.Opcode.Jump3, (p, s) => new Jump3(p, s)},
            {Jsm.Opcode.LadderUp, (p, s) => new LadderUp(p, s)},
            {Jsm.Opcode.LadderDown, (p, s) => new LadderDown(p, s)},
            {Jsm.Opcode.LadderUp2, (p, s) => new LadderUp2(p, s)},
            {Jsm.Opcode.LadderDown2, (p, s) => new LadderDown2(p, s)},
            {Jsm.Opcode.MapJump, (p, s) => new MapJump(p, s)},
            {Jsm.Opcode.MapJump3, (p, s) => new MapJump3(p, s)},
            {Jsm.Opcode.SetModel, (p, s) => new SetModel(p, s)},
            {Jsm.Opcode.BaseAnime, (p, s) => new BaseAnime(p, s)},
            {Jsm.Opcode.Anime, (p, s) => new Anime(p, s)},
            {Jsm.Opcode.AnimeKeep, (p, s) => new AnimeKeep(p, s)},
            {Jsm.Opcode.CAnime, (p, s) => new CAnime(p, s)},
            {Jsm.Opcode.CAnimeKeep, (p, s) => new CAnimeKeep(p, s)},
            {Jsm.Opcode.RAnime, (p, s) => new RAnime(p, s)},
            {Jsm.Opcode.RAnimeKeep, (p, s) => new RAnimeKeep(p, s)},
            {Jsm.Opcode.RCAnime, (p, s) => new RCAnime(p, s)},
            {Jsm.Opcode.RCAnimeKeep, (p, s) => new RCAnimeKeep(p, s)},
            {Jsm.Opcode.RAnimeLoop, (p, s) => new RAnimeLoop(p, s)},
            {Jsm.Opcode.RCAnimeLoop, (p, s) => new RCAnimeLoop(p, s)},
            {Jsm.Opcode.LadderAnime, (p, s) => new LadderAnime(p, s)},
            {Jsm.Opcode.DiscJump, (p, s) => new DiscJump(p, s)},
            {Jsm.Opcode.SetLine, (p, s) => new SetLine(p, s)},
            {Jsm.Opcode.LineOn, (p, s) => new LineOn(p, s)},
            {Jsm.Opcode.LineOff, (p, s) => new LineOff(p, s)},
            {Jsm.Opcode.Wait, (p, s) => new Wait(p, s)},
            {Jsm.Opcode.MSpeed, (p, s) => new MSpeed(p, s)},
            {Jsm.Opcode.Move, (p, s) => new Move(p, s)},
            {Jsm.Opcode.MoveA, (p, s) => new MoveA(p, s)},
            {Jsm.Opcode.PMoveA, (p, s) => new PMoveA(p, s)},
            {Jsm.Opcode.CMove, (p, s) => new CMove(p, s)},
            {Jsm.Opcode.FMove, (p, s) => new FMove(p, s)},
            {Jsm.Opcode.PJumpA, (p, s) => new PJumpA(p, s)},
            {Jsm.Opcode.AnimeSync, (p, s) => new AnimeSync(p, s)},
            {Jsm.Opcode.AnimeStop, (p, s) => new AnimeStop(p, s)},
            {Jsm.Opcode.MesW, (p, s) => new MesW()},
            {Jsm.Opcode.Mes, (p, s) => new Mes(p, s)},
            {Jsm.Opcode.MesSync, (p, s) => new MesSync(p, s)},
            {Jsm.Opcode.MesVar, (p, s) => new MesVar(p, s)},
            {Jsm.Opcode.Ask, (p, s) => new Ask(p, s)},
            {Jsm.Opcode.WinSize, (p, s) => new WinSize(p, s)},
            {Jsm.Opcode.WinClose, (p, s) => new WinClose(p, s)},
            {Jsm.Opcode.UCOn, (p, s) => new UCOn(p, s)},
            {Jsm.Opcode.UCOff, (p, s) => new UCOff(p, s)},
            {Jsm.Opcode.Movie, (p, s) => new Movie(p, s)},
            {Jsm.Opcode.MovieSync, (p, s) => new MovieSync(p, s)},
            {Jsm.Opcode.SetPC, (p, s) => new SetPC(p, s)},
            {Jsm.Opcode.Dir, (p, s) => new Dir(p, s)},
            {Jsm.Opcode.DirP, (p, s) => new DirP(p, s)},
            {Jsm.Opcode.DirA, (p, s) => new DirA(p, s)},
            {Jsm.Opcode.PDirA, (p, s) => new PDirA(p, s)},
            {Jsm.Opcode.SPUReady, (p, s) => new SPUReady(p, s)},
            {Jsm.Opcode.TalkOn, (p, s) => new TalkOn(p, s)},
            {Jsm.Opcode.TalkOff, (p, s) => new TalkOff(p, s)},
            {Jsm.Opcode.PushOn, (p, s) => new PushOn(p, s)},
            {Jsm.Opcode.PushOff, (p, s) => new PushOff(p, s)},
            {Jsm.Opcode.IsTouch, (p, s) => new IsTouch(p, s)},
            {Jsm.Opcode.MapJumpO, (p, s) => new MapJumpO(p, s)},
            {Jsm.Opcode.MapJumpOn, (p, s) => new MapJumpOn(p, s)},
            {Jsm.Opcode.MapJumpOff, (p, s) => new MapJumpOff(p, s)},
            {Jsm.Opcode.SetMesSpeed, (p, s) => new SetMesSpeed(s)},
            {Jsm.Opcode.Show, (p, s) => new Show(p, s)},
            {Jsm.Opcode.Hide, (p, s) => new Hide(p, s)},
            {Jsm.Opcode.TalkRadius, (p, s) => new TalkRadius(p, s)},
            {Jsm.Opcode.PushRadius, (p, s) => new PushRadius(p, s)},
            {Jsm.Opcode.AMesW, (p, s) => new AMesW(p, s)},
            {Jsm.Opcode.AMes, (p, s) => new AMes(p, s)},
            {Jsm.Opcode.GetInfo, (p, s) => new GetInfo(p, s)},
            {Jsm.Opcode.ThroughOn, (p, s) => new ThroughOn(p, s)},
            {Jsm.Opcode.ThroughOff, (p, s) => new ThroughOff(p, s)},
            {Jsm.Opcode.Battle, (p, s) => new Battle(p, s)},
            {Jsm.Opcode.BattleResult, (p, s) => new BattleResult(p, s)},
            {Jsm.Opcode.BattleOn, (p, s) => new BattleOn(p, s)},
            {Jsm.Opcode.BattleOff, (p, s) => new BattleOff(p, s)},
            {Jsm.Opcode.KeyScan, (p, s) => new KeyScan(p, s)},
            {Jsm.Opcode.KeyOn, (p, s) => new KeyOn(p, s)},
            {Jsm.Opcode.PGetInfo, (p, s) => new PGetInfo(p, s)},
            {Jsm.Opcode.DScroll, (p, s) => new DScroll(p, s)},
            {Jsm.Opcode.LScroll, (p, s) => new LScroll(p, s)},
            {Jsm.Opcode.CScroll, (p, s) => new CScroll(p, s)},
            {Jsm.Opcode.DScrollA, (p, s) => new DScrollA(p, s)},
            {Jsm.Opcode.LScrollA, (p, s) => new LScrollA(p, s)},
            {Jsm.Opcode.CScrollA, (p, s) => new CScrollA(p, s)},
            {Jsm.Opcode.ScrollSync, (p, s) => new ScrollSync(p, s)},
            {Jsm.Opcode.RMove, (p, s) => new RMove(p, s)},
            {Jsm.Opcode.RMoveA, (p, s) => new RMoveA(p, s)},
            {Jsm.Opcode.RPMoveA, (p, s) => new RPMoveA(p, s)},
            {Jsm.Opcode.RCMove, (p, s) => new RCMove(p, s)},
            {Jsm.Opcode.RFMove, (p, s) => new RFMove(p, s)},
            {Jsm.Opcode.MoveSync, (p, s) => new MoveSync(p, s)},
            {Jsm.Opcode.Clear, (p, s) => new Clear(p, s)},
            {Jsm.Opcode.DScrollP, (p, s) => new DScrollP(p, s)},
            {Jsm.Opcode.LScrollP, (p, s) => new LScrollP(p, s)},
            {Jsm.Opcode.CScrollP, (p, s) => new CScrollP(p, s)},
            {Jsm.Opcode.LTurnR, (p, s) => new LTurnR(p, s)},
            {Jsm.Opcode.LTurnL, (p, s) => new LTurnL(p, s)},
            {Jsm.Opcode.CTurnR, (p, s) => new CTurnR(p, s)},
            {Jsm.Opcode.CTurnL, (p, s) => new CTurnL(p, s)},
            {Jsm.Opcode.AddParty, (p, s) => new AddParty(p, s)},
            {Jsm.Opcode.SubParty, (p, s) => new SubParty(p, s)},
            {Jsm.Opcode.ChangeParty, (p, s) => new ChangeParty(p, s)},
            {Jsm.Opcode.RefreshParty, (p, s) => new RefreshParty(p, s)},
            {Jsm.Opcode.SetParty, (p, s) => new SetParty(p, s)},
            {Jsm.Opcode.IsParty, (p, s) => new IsParty(p, s)},
            {Jsm.Opcode.AddMember, (p, s) => new AddMember(p, s)},
            {Jsm.Opcode.SubMember, (p, s) => new SubMember(p, s)},
            {Jsm.Opcode.IsMember, (p, s) => new IsMember()},
            {Jsm.Opcode.LTurn, (p, s) => new LTurn(p, s)},
            {Jsm.Opcode.CTurn, (p, s) => new CTurn(p, s)},
            {Jsm.Opcode.PLTurn, (p, s) => new PLTurn(p, s)},
            {Jsm.Opcode.PCTurn, (p, s) => new PCTurn(p, s)},
            {Jsm.Opcode.Join, (p, s) => new Join(p, s)},
            {Jsm.Opcode.MESFORCUS, (p, s) => new MESFORCUS()},
            {Jsm.Opcode.BGAnime, (p, s) => new BGAnime(p, s)},
            {Jsm.Opcode.RBGAnime, (p, s) => new RBGAnime(p, s)},
            {Jsm.Opcode.RBGAnimeLoop, (p, s) => new RBGAnimeLoop(p, s)},
            {Jsm.Opcode.BGAnimeSync, (p, s) => new BGAnimeSync(p, s)},
            {Jsm.Opcode.BGDraw, (p, s) => new BGDraw(p, s)},
            {Jsm.Opcode.BGOff, (p, s) => new BGOff(p, s)},
            {Jsm.Opcode.BGAnimeSpeeed, (p, s) => new BGAnimeSpeed(p, s)},
            {Jsm.Opcode.SetTimer, (p, s) => new SetTimer(s)},
            {Jsm.Opcode.DispTimer, (p, s) => new DispTimer(p, s)},
            {Jsm.Opcode.ShadeTimer, (p, s) => new ShadeTimer()},
            {Jsm.Opcode.SetGetA, (p, s) => new SetGetA(p, s)},
            {Jsm.Opcode.SetRootTrans, (p, s) => new SetRootTrans(p, s)},
            {Jsm.Opcode.SetVibrate, (p, s) => new SetVibrate(p, s)},
            {Jsm.Opcode.StopVibrate, (p, s) => new StopVibrate()},
            {Jsm.Opcode.MovieReady, (p, s) => new MovieReady(p, s)},
            {Jsm.Opcode.GetTimer, (p, s) => new GetTimer(p, s)},
            {Jsm.Opcode.FadeIn, (p, s) => new FadeIn(p, s)},
            {Jsm.Opcode.FadeOut, (p, s) => new FadeOut(p, s)},
            {Jsm.Opcode.FadeSync, (p, s) => new FadeSync(p, s)},
            {Jsm.Opcode.Shake, (p, s) => new Shake(p, s)},
            {Jsm.Opcode.ShakeOff, (p, s) => new ShakeOff(p, s)},
            {Jsm.Opcode.FadeBlack, (p, s) => new FadeBlack(p, s)},
            {Jsm.Opcode.FollowOff, (p, s) => new FollowOff(p, s)},
            {Jsm.Opcode.FollowOn, (p, s) => new FollowOn(p, s)},
            {Jsm.Opcode.Gameover, (p, s) => new GameOver(p, s)},
            {Jsm.Opcode.Ending, (p, s) => new Ending()},
            {Jsm.Opcode.ShadeLevel, (p, s) => new ShadeLevel(p, s)},
            {Jsm.Opcode.ShadeForm, (p, s) => new ShadeForm(p, s)},
            {Jsm.Opcode.FMoveA, (p, s) => new FMoveA(p, s)},
            {Jsm.Opcode.FMoveP, (p, s) => new FMoveP()},
            {Jsm.Opcode.ShadeSet, (p, s) => new ShadeSet(p, s)},
            {Jsm.Opcode.MusicChange, (p, s) => new MusicChange(p, s)},
            {Jsm.Opcode.MusicLoad, (p, s) => new MusicLoad(p, s)},
            {Jsm.Opcode.FadeNOne, (p, s) => new FadeNOne(p, s)},
            {Jsm.Opcode.PolyColor, (p, s) => new PolyColor(p, s)},
            {Jsm.Opcode.PolyColorAll, (p, s) => new PolyColorAll(p, s)},
            {Jsm.Opcode.KillTimer, (p, s) => new KillTimer(p, s)},
            {Jsm.Opcode.CrossMusic, (p, s) => new CrossMusic(p, s)},
            {Jsm.Opcode.DualMusic, (p, s) => new DualMusic(p, s)},
            {Jsm.Opcode.EffectPlay, (p, s) => new EffectPlay(p, s)},
            {Jsm.Opcode.EffectLoad, (p, s) => new EffectLoad(p, s)},
            {Jsm.Opcode.LoadSync, (p, s) => new LoadSync(p, s)},
            {Jsm.Opcode.MusicStop, (p, s) => new MusicStop(p, s)},
            {Jsm.Opcode.MusicVol, (p, s) => new MusicVol(p, s)},
            {Jsm.Opcode.MusicVolTrans, (p, s) => new MusicVolTrans(p, s)},
            {Jsm.Opcode.MusicVolFade, (p, s) => new MusicVolFade(s)},
            {Jsm.Opcode.AllSEVol, (p, s) => new AllSEVol(p, s)},
            {Jsm.Opcode.AllSEVolTrans, (p, s) => new AllSEVolTrans(p, s)},
            {Jsm.Opcode.AllSEPos, (p, s) => new AllSEPos(p, s)},
            {Jsm.Opcode.AllSEPosTrans, (p, s) => new ALLSEPOSTRANS(p, s)},
            {Jsm.Opcode.SEVol, (p, s) => new SEVol(p, s)},
            {Jsm.Opcode.SEVolTrans, (p, s) => new SEVolTrans(p, s)},
            {Jsm.Opcode.SEPos, (p, s) => new SEPos(p, s)},
            {Jsm.Opcode.SEPosTrans, (p, s) => new SEPosTrans(p, s)},
            {Jsm.Opcode.SetBattleMusic, (p, s) => new SetBattleMusic(p, s)},
            {Jsm.Opcode.BattleMode, (p, s) => new BattleMode(p, s)},
            {Jsm.Opcode.SEStop, (p, s) => new SEStop(p, s)},
            {Jsm.Opcode.BGAnimeFlag, (p, s) => new BGAnimeFlag()},
            {Jsm.Opcode.InitSound, (p, s) => new InitSound(p, s)},
            {Jsm.Opcode.BGShade, (p, s) => new BGShade(p, s)},
            {Jsm.Opcode.BGShadeStop, (p, s) => new BGShadeStop(p, s)},
            {Jsm.Opcode.RBGShadeLoop, (p, s) => new RBGShadeLoop(p, s)},
            {Jsm.Opcode.DScroll2, (p, s) => new DScroll2(p, s)},
            {Jsm.Opcode.LScroll2, (p, s) => new LScroll2(p, s)},
            {Jsm.Opcode.CScroll2, (p, s) => new CScroll2(p, s)},
            {Jsm.Opcode.DScrollA2, (p, s) => new DScrollA2(p, s)},
            {Jsm.Opcode.LScrollA2, (p, s) => new LScrollA2()},
            {Jsm.Opcode.CScrollA2, (p, s) => new CScrollA2(p, s)},
            {Jsm.Opcode.DScrollP2, (p, s) => new DScrollP2()},
            {Jsm.Opcode.LScrollP2, (p, s) => new LScrollP2()},
            {Jsm.Opcode.CScrollP2, (p, s) => new CScrollP2()},
            {Jsm.Opcode.ScrollSync2, (p, s) => new ScrollSync2(p, s)},
            {Jsm.Opcode.ScrollMode2, (p, s) => new ScrollMode2(p, s)},
            {Jsm.Opcode.MenuEnable, (p, s) => new MenuEnable(p, s)},
            {Jsm.Opcode.MenuDisable, (p, s) => new MenuDisable(p, s)},
            {Jsm.Opcode.FootStepOn, (p, s) => new FootStepOn(p, s)},
            {Jsm.Opcode.FootStepOff, (p, s) => new FootStepOff(p, s)},
            {Jsm.Opcode.FootStepOffAll, (p, s) => new FootStepOffAll(p, s)},
            {Jsm.Opcode.FootStepCut, (p, s) => new FootStepCut(p, s)},
            {Jsm.Opcode.PreMapJump, (p, s) => new PreMapJump(p, s)},
            {Jsm.Opcode.Use, (p, s) => new Use(p, s)},
            {Jsm.Opcode.Split, (p, s) => new Split(p, s)},
            {Jsm.Opcode.AnimeSpeed, (p, s) => new AnimeSpeed(p, s)},
            {Jsm.Opcode.RND, (p, s) => new RND(p, s)},
            {Jsm.Opcode.DColAdd, (p, s) => new DColAdd(p, s)},
            {Jsm.Opcode.DColSub, (p, s) => new DColSub(p, s)},
            {Jsm.Opcode.TColAdd, (p, s) => new TColAdd(p, s)},
            {Jsm.Opcode.TColSub, (p, s) => new TColSub(p, s)},
            {Jsm.Opcode.FColAdd, (p, s) => new FColAdd(p, s)},
            {Jsm.Opcode.FColSub, (p, s) => new FColSub(p, s)},
            {Jsm.Opcode.ColSync, (p, s) => new ColSync(p, s)},
            {Jsm.Opcode.DOffset, (p, s) => new DOffset(p, s)},
            {Jsm.Opcode.LOffsets, (p, s) => new LOffsets(p, s)},
            {Jsm.Opcode.COffsets, (p, s) => new COffsets(p, s)},
            {Jsm.Opcode.LOffset, (p, s) => new LOffset(p, s)},
            {Jsm.Opcode.COffset, (p, s) => new COffset(p, s)},
            {Jsm.Opcode.OffsetSync, (p, s) => new OffsetSync(p, s)},
            {Jsm.Opcode.RunEnable, (p, s) => new RunEnable()},
            {Jsm.Opcode.RunDisable, (p, s) => new RunDisable()},
            {Jsm.Opcode.MapFadeOff, (p, s) => new MapFadeOff(p, s)},
            {Jsm.Opcode.MapFadeOn, (p, s) => new MapFadeOn(p, s)},
            {Jsm.Opcode.InitTrace, (p, s) => new InitTrace(p, s)},
            {Jsm.Opcode.SetDress, (p, s) => new SetDress(s)},
            {Jsm.Opcode.GetDress, (p, s) => new GetDress()},
            {Jsm.Opcode.FaceDir, (p, s) => new FaceDir(p, s)},
            {Jsm.Opcode.FaceDirA, (p, s) => new FaceDirA(p, s)},
            {Jsm.Opcode.FaceDirP, (p, s) => new FaceDirP(p, s)},
            {Jsm.Opcode.FaceDirLimit, (p, s) => new FaceDirLimit(p, s)},
            {Jsm.Opcode.FaceDirOff, (p, s) => new FaceDirOff(p, s)},
            {Jsm.Opcode.SaralyOff, (p, s) => new SaralyOff(p, s)},
            {Jsm.Opcode.SaralyOn, (p, s) => new SaralyOn(p, s)},
            {Jsm.Opcode.SaralyDispOff, (p, s) => new SaralyDispOff(p, s)},
            {Jsm.Opcode.SaralyDispOn, (p, s) => new SaralyDispOn(p, s)},
            {Jsm.Opcode.MesMode, (p, s) => new MesMode(p, s)},
            {Jsm.Opcode.FaceDirInit, (p, s) => new FaceDirInit(p, s)},
            {Jsm.Opcode.FaceDirI, (p, s) => new FaceDirI(p, s)},
            {Jsm.Opcode.Junction, (p, s) => new Junction(p, s)},
            {Jsm.Opcode.SetCamera, (p, s) => new SetCamera(p, s)},
            {Jsm.Opcode.BattleCut, (p, s) => new BattleCut(p, s)},
            {Jsm.Opcode.FootStepCopy, (p, s) => new FootStepCopy(p, s)},
            {Jsm.Opcode.WorldMapJump, (p, s) => new WorldMapJump(p, s)},
            {Jsm.Opcode.RFaceDirI, (p, s) => new RFaceDirI()},
            {Jsm.Opcode.RFaceDir, (p, s) => new RFaceDir(p, s)},
            {Jsm.Opcode.RFaceDirA, (p, s) => new RFaceDirA(p, s)},
            {Jsm.Opcode.RFaceDirP, (p, s) => new RFaceDirP(p, s)},
            {Jsm.Opcode.RFaceDirOff, (p, s) => new RFaceDirOff(p, s)},
            {Jsm.Opcode.FaceDirSync, (p, s) => new FaceDirSync(p, s)},
            {Jsm.Opcode.CopyInfo, (p, s) => new CopyInfo(p, s)},
            {Jsm.Opcode.PCopyInfo, (p, s) => new PCopyInfo()},
            {Jsm.Opcode.RAMesW, (p, s) => new RAMesW(p, s)},
            {Jsm.Opcode.BGShadeOff, (p, s) => new BGShadeOff(p, s)},
            {Jsm.Opcode.Axis, (p, s) => new Axis(p, s)},
            {Jsm.Opcode.AxisSync, (p, s) => new AxisSync()},
            {Jsm.Opcode.MenuNormal, (p, s) => new MenuNormal(p, s)},
            {Jsm.Opcode.MenuPHS, (p, s) => new MenuPHS(p, s)},
            {Jsm.Opcode.BGClear, (p, s) => new BGClear(p, s)},
            {Jsm.Opcode.GetParty, (p, s) => new GetParty(p, s)},
            {Jsm.Opcode.MenuShop, (p, s) => new MenuShop(p, s)},
            {Jsm.Opcode.Disc, (p, s) => new Disc(p, s)},
            {Jsm.Opcode.DScroll3, (p, s) => new DScroll3()},
            {Jsm.Opcode.LScroll3, (p, s) => new LScroll3(p, s)},
            {Jsm.Opcode.CScroll3, (p, s) => new CScroll3()},
            {Jsm.Opcode.MAccel, (p, s) => new MAccel(p, s)},
            {Jsm.Opcode.MLimit, (p, s) => new MLimit(p, s)},
            {Jsm.Opcode.AddItem, (p, s) => new AddItem(p, s)},
            {Jsm.Opcode.SetWitch, (p, s) => new SetWitch(p, s)},
            {Jsm.Opcode.SetOdin, (p, s) => new SetOdin(p, s)},
            {Jsm.Opcode.ResetGF, (p, s) => new ResetGF(p, s)},
            {Jsm.Opcode.MenuName, (p, s) => new MenuName(p, s)},
            {Jsm.Opcode.Rest, (p, s) => new Rest(p, s)},
            {Jsm.Opcode.MoveCancel, (p, s) => new MoveCancel(p, s)},
            {Jsm.Opcode.PMoveCancel, (p, s) => new PMoveCancel()},
            {Jsm.Opcode.ActorMode, (p, s) => new ActorMode(p, s)},
            {Jsm.Opcode.MenuSave, (p, s) => new MenuSave(p, s)},
            {Jsm.Opcode.SaveEnable, (p, s) => new SaveEnable(p, s)},
            {Jsm.Opcode.PHSEnable, (p, s) => new PHSEnable(p, s)},
            {Jsm.Opcode.Hold, (p, s) => new Hold(p, s)},
            {Jsm.Opcode.MovieCut, (p, s) => new MovieCut(p, s)},
            {Jsm.Opcode.SetPlace, (p, s) => new SetPlace(p, s)},
            {Jsm.Opcode.SetDCamera, (p, s) => new SetDCamera(p, s)},
            {Jsm.Opcode.ChoiceMusic, (p, s) => new ChoiceMusic(p, s)},
            {Jsm.Opcode.GetCard, (p, s) => new GetCard(p, s)},
            {Jsm.Opcode.DrawPoint, (p, s) => new DrawPoint(p, s)},
            {Jsm.Opcode.PHSPower, (p, s) => new PHSPower(p, s)},
            {Jsm.Opcode.Key, (p, s) => new Key(p, s)},
            {Jsm.Opcode.CardGame, (p, s) => new CardGame(p, s)},
            {Jsm.Opcode.SetBar, (p, s) => new SetBar(p, s)},
            {Jsm.Opcode.DispBar, (p, s) => new DispBar(p, s)},
            {Jsm.Opcode.KillBar, (p, s) => new KillBar(p, s)},
            {Jsm.Opcode.ScrollRatio2, (p, s) => new ScrollRatio2(p, s)},
            {Jsm.Opcode.WhoAmI, (p, s) => new WhoAmI(p, s)},
            {Jsm.Opcode.MusicStatus, (p, s) => new MusicStatus(p, s)},
            {Jsm.Opcode.MusicReplay, (p, s) => new MusicReplay(p, s)},
            {Jsm.Opcode.DoorLineOff, (p, s) => new DoorLineOff(p, s)},
            {Jsm.Opcode.DoorLineOn, (p, s) => new DoorLineOn(p, s)},
            {Jsm.Opcode.MusicSkip, (p, s) => new MusicSkip(p, s)},
            {Jsm.Opcode.Dying, (p, s) => new Dying(p, s)},
            {Jsm.Opcode.SetHP, (p, s) => new SetHP(p, s)},
            {Jsm.Opcode.GetHP, (p, s) => new GetHP()},
            {Jsm.Opcode.MoveFlush, (p, s) => new MOVEFLUSH(p, s)},
            {Jsm.Opcode.MusicVolSync, (p, s) => new MUSICVOLSYNC(p, s)},
            {Jsm.Opcode.PushAnime, (p, s) => new PUSHANIME(p, s)},
            {Jsm.Opcode.PopAnime, (p, s) => new POPANIME(p, s)},
            {Jsm.Opcode.KeyScan2, (p, s) => new KeyScan2(p, s)},
            {Jsm.Opcode.KeyOn2, (p, s) => new KeyOn2()},
            {Jsm.Opcode.ParticleOn, (p, s) => new ParticleOn(p, s)},
            {Jsm.Opcode.ParticleOff, (p, s) => new ParticleOff(p, s)},
            {Jsm.Opcode.KeySighnChange, (p, s) => new KeySighnChange(p, s)},
            {Jsm.Opcode.AddGil, (p, s) => new AddGil(p, s)},
            {Jsm.Opcode.AddPastGil, (p, s) => new AddPastGil(s)},
            {Jsm.Opcode.AddSeedLevel, (p, s) => new AddSeedLevel(p, s)},
            {Jsm.Opcode.ParticleSet, (p, s) => new ParticleSet(p, s)},
            {Jsm.Opcode.SetDrawPoint, (p, s) => new SetDrawPoint(p, s)},
            {Jsm.Opcode.MenuTips, (p, s) => new MenuTips(p, s)},
            {Jsm.Opcode.LastIn, (p, s) => new LastIn(p, s)},
            {Jsm.Opcode.LastOut, (p, s) => new LastOut(p, s)},
            {Jsm.Opcode.SealedOff, (p, s) => new SealedOff(p, s)},
            {Jsm.Opcode.MenuTUTO, (p, s) => new MenuTUTO(p, s)},
            {Jsm.Opcode.OpenEyes, (p, s) => new OpenEyes()},
            {Jsm.Opcode.CloseEyes, (p, s) => new CloseEyes()},
            {Jsm.Opcode.BlinkEyes, (p, s) => new BlinkEyes()},
            {Jsm.Opcode.SetCard, (p, s) => new SetCard(p, s)},
            {Jsm.Opcode.HowManyCard, (p, s) => new HowManyCard(p, s)},
            {Jsm.Opcode.WhereCard, (p, s) => new WhereCard(p, s)},
            {Jsm.Opcode.AddMagic, (p, s) => new AddMagic(p, s)},
            {Jsm.Opcode.Swap, (p, s) => new Swap(p, s)},
            {Jsm.Opcode.SetParty2, (p, s) => new SetParty2()},
            {Jsm.Opcode.SPUSync, (p, s) => new SPUSync(p, s)},
            {Jsm.Opcode.Broken, (p, s) => new Broken(p, s)},
            {Jsm.Opcode.AngeloDisable, (p, s) => new AngeloDisable(p, s)},
            {Jsm.Opcode.Unknown2, (p, s) => new Unknown2(p, s)},
            {Jsm.Opcode.Unknown3, (p, s) => new Unknown3(p, s)},
            {Jsm.Opcode.Unknown4, (p, s) => new Unknown4(p, s)},
            {Jsm.Opcode.HasItem, (p, s) => new HasItem(p, s)},
            {Jsm.Opcode.Unknown6, (p, s) => new Unknown6(p, s)},
            {Jsm.Opcode.Unknown7, (p, s) => new Unknown7(p, s)},
            {Jsm.Opcode.Unknown8, (p, s) => new Unknown8(p, s)},
            {Jsm.Opcode.Unknown9, (p, s) => new Unknown9(p, s)},
            {Jsm.Opcode.Unknown10, (p, s) => new Unknown10(p, s)},
            {Jsm.Opcode.Unknown11, (p, s) => new Unknown11(p, s)},
            {Jsm.Opcode.Unknown12, (p, s) => new Unknown12(p, s)},
            {Jsm.Opcode.Unknown13, (p, s) => new Unknown13(p, s)},
            {Jsm.Opcode.Unknown14, (p, s) => new Unknown14(p, s)},
            {Jsm.Opcode.Unknown15, (p, s) => new Unknown15(p, s)},
            {Jsm.Opcode.Unknown16, (p, s) => new Unknown16(p, s)},
            {Jsm.Opcode.PreMapJump2, (p, s) => new PreMapJump2(p, s)},
            {Jsm.Opcode.TUTO, (p, s) => new TUTO(p, s)}
        };

        #endregion Fields

        #region Delegates

        private delegate JsmInstruction Make(int parameter, IStack<IJsmExpression> stack);

        #endregion Delegates

        #region Methods

        public static JsmInstruction TryMake(Jsm.Opcode opcode, int parameter, IStack<IJsmExpression> stack)
        {
            if (Factories.TryGetValue(opcode, out var make))
                return make(parameter, stack);

            return null;
        }

        public virtual IAwaitable Execute(IServices services) => TestExecute(services);

        public virtual void Format(ScriptWriter sw, IScriptFormatterContext formatterContext, IServices services) => sw.AppendLine(this.ToString());

        public virtual IAwaitable TestExecute(IServices services) => throw new NotImplementedException($"The instruction {GetType()} is not implemented yet. Please override \"{nameof(Execute)}\" method if you know the correct behavior or \"{nameof(TestExecute)}\" method for test environment.");

        #endregion Methods
    }
}